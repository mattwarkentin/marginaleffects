# Marginal Means 

```{r, include = FALSE}
options(width = 1000)
knitr::opts_chunk$set(
  collapse = TRUE,
  fig.width = 6,
  fig.asp = .4,
  warning = FALSE,
  message = FALSE,
  comment = "#>"
)
library("tidyverse")
library("kableExtra")
```

In the context of this package, "marginal means" refer to the values obtained by this three step process:

1. Construct a "grid" of predictor values with all combinations of categorical variables, and where numeric variables are held at their means.
2. Calculate adjusted predictions for each cell in that grid.
3. Take the average of those adjusted predictions across one dimension of the grid to obtain the marginal means.

For example, consider a model with a numeric, a factor, and a logical predictor:

```{r}
library(marginaleffects)

dat <- mtcars
dat$cyl <- as.factor(dat$cyl)
dat$am <- as.logical(dat$am)
mod <- lm(mpg ~ hp + cyl + am, data = dat)
```

Using the `predictions` function, we set the `hp` variable at its mean and compute predictions for all combinations for `am` and `cyl`:

```{r}
p <- predictions(
    mod,
    newdata = datagrid(am = unique, cyl = unique))
```

For illustration purposes, it is useful to reshape the above results:

```{r, echo = FALSE, message = FALSE, warning = FALSE}
library(tidyverse)
library(kableExtra)
pred <- p |>
    select(cyl, am, estimate) |>
    pivot_wider(names_from = "am", values_from = "estimate") |>
    rowwise() |>
    mutate(`Marginal means by cyl` = mean(c(`TRUE`, `FALSE`)))
row <- data.frame(x = "Marginal means by am",
                  y = mean(pred[["TRUE"]]),
                  z = mean(pred[["FALSE"]]))
colnames(row) <- colnames(pred)[1:3]
pred <- bind_rows(pred, row)
for (i in 2:ncol(pred)) {
    pred[[i]] <- sprintf("%.1f", pred[[i]])
}
pred[pred == "NA"] <- ""
kbl(pred) |> 
    kable_styling() |>
    add_header_above(c(" " = 1, "am" = 2, " " = 1))
```

The marginal means by `am` and `cyl` are obtained by taking the mean of the adjusted predictions across cells. We can achieve the same results with the `predictions()` function, with `datagrid()` to specify a balanced grid, and the `by` argument to define the marginalization dimension:

```{r}
predictions(
    mod,
    by = "am",
    newdata = datagrid(am = unique, cyl = unique))
```

Alternatively, we can use the convenient `grid_type="balanced"` argument:

```{r}
predictions(
    mod,
    by = "cyl",
    newdata = datagrid(grid_type = "balanced"))
```

We can of course marginalize over the interaction between more variables, by changing the `by` argument:

```{r}
predictions(
    mod,
    by = c("am", "cyl"),
    newdata = datagrid(grid_type = "balanced"))
```

The same results can be achieved using the [powerful `emmeans` package](https://cran.r-project.org/package=emmeans):

```{r}
library(emmeans)
emmeans(mod, specs = ~cyl)
emmeans(mod, specs = ~cyl + am)
```

## Marginal Means vs. Average Predictions

What should scientists report? Marginal means or average predictions? 

Many analysts ask this question, but unfortunately there isn't a single answer. As explained above, marginal means are a special case of predictions, made on a perfectly balanced grid of categorical predictors, with numeric predictors held at their means, and marginalized with respect to some focal variables. Whether the analyst prefers to report this specific type of marginal means or another kind of average prediction will depend on the characteristics of the sample and the population to which they want to generalize.

After reading this vignette and the discussion of `emmeans` in the [Alternative Software vignette](alternative_software.html), you may want to consult with a statistician to discuss your specific real-world problem and make an informed choice.

## Plot conditional marginal means

The `marginaleffects` package offers several functions to plot how some quantities vary as a function of others:

* `plot_predictions`: Conditional adjusted predictions -- how does the predicted outcome change as a function of regressors?
* `plot_comparisons`: Conditional comparisons -- how do contrasts change as a function of regressors?
* `plot_slopes`: Conditional marginal effects -- how does the slope change as a function of regressors?

There is no analogous function for marginal means. However, it is very easy to achieve a similar effect using the `predictions()` function, its `by` argument, and standard plotting functions. In the example below, we take these steps:

1. Estimate a model with one continuous (`hp`) and one categorical regressor (`cyl`).
1. Create a perfectly "balanced" data grid for each combination of `hp` and `cyl`. This is specified by the user in the `datagrid()` call.
1. Compute fitted values (aka "adjusted predictions") for each cell of the grid.
1. Use the `by` argument to take the average of predicted values for each value of `hp`, across margins of `cyl`.
1. Compute standard errors around the averaged predicted values (i.e., marginal means).
1. Create symmetric confidence intervals in the usual manner.
1. Plot the results.

```{r}
library(ggplot2)

mod <- lm(mpg ~ hp + factor(cyl), data = mtcars)

p <- predictions(mod,
    by = "hp",
    newdata = datagrid(
        model = mod,
        hp = seq(100, 120, length.out = 10),
        cyl = mtcars$cyl))

ggplot(p) +
    geom_ribbon(aes(hp, ymin = conf.low, ymax = conf.high), alpha = .2) +
    geom_line(aes(hp, estimate))
```